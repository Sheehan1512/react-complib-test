"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const l=require("path"),a=require("fs"),u=require("picocolors"),p=require("magic-string");function f(c){let r=!1;return{name:"vite:lib-inject-css",apply:"build",enforce:"post",config(){const{rollupOptions:s={},build:e,...o}=c||{};let t=s.output;return t=[t].flat().map(i=>({hoistTransitiveImports:!1,...i})),s.output=t.length===1?t[0]:t,{build:{...e,lib:o,rollupOptions:s,cssCodeSplit:!0,ssrEmitAssets:!0}}},configResolved({build:s}){const e=[],o=[s.rollupOptions.output].flat();s.lib||(r=!0,e.push("Current build is not in library mode, skip code injection.")),s.lib&&s.cssCodeSplit===!1&&e.push("`config.build.cssCodeSplit` is set to `true` by the plugin internally in library mode, but it seems to be `false` now. This may cause style code injection to fail, please check the configuration to prevent this option from being modified."),s.ssr&&s.ssrEmitAssets===!1&&e.push("`config.build.ssrEmitAssets` is set to `true` by the plugin internally in library mode, but it seems to be `false` now. This may cause style code injection to fail on SSR, please check the configuration to prevent this option from being modified.");const t=i=>{e.push("When `"+i+"` is `true`, the association between chunk file and its css references will lose, so the style code injection will be skipped.")};o.some(i=>(i==null?void 0:i.preserveModules)===!0)&&(r=!0,t("rollupOptions.output.preserveModules")),s.rollupOptions.preserveModules===!0&&(r=!0,t("rollupOptions.preserveModules")),e.forEach(i=>console.log(`
${u.cyan("[vite:lib-inject-css]:")} ${u.yellow(i)}
`))},renderChunk(s,e){if(r||!e.viteMetadata)return;const{importedCss:o}=e.viteMetadata;if(!o.size)return;const t=new p(s);for(const i of o){let n=l.relative(l.dirname(e.fileName),i).replaceAll(/[\\/]+/g,"/");n=n.startsWith(".")?n:`./${n}`,t.prepend(`import '${n}';
`)}return{code:t.toString(),map:t.generateMap()}}}}function d(c){const r={},s={};for(const e of[c].flat()){if(!e)break;const o=a.statSync(e).isDirectory()?a.readdirSync(e).map(t=>l.resolve(e,t)):[e];for(const t of o){const{name:i}=l.parse(t),n=s[i]||0;r[`${i}${n||""}`]=t,s[i]=n+1}}return r}exports.libInjectCss=f;exports.scanEntries=d;
